{
	"Leptos component": {
		"scope": "rust",
		"prefix": ["#[component]"],
		"description": "Create a Leptos component.",
		"body": [
			"/// ${2:Documentation for [`$1`]}",
			"#[component]",
			"pub fn ${1:}() -> impl IntoView {",
			"    ${0:}",
			"",
			"    view! {",
			"        ${3:}",
			"    }",
			"}"
		]
	},
	"Leptos server function": {
		"scope": "rust",
		"prefix": ["#[server]"],
		"description": "Create a Leptos server function.",
		"body": [
			"/// ${2:Documentation for [`$1`]}",
			"#[server]",
			"pub async fn ${1:}(param: String) -> Result<(), ServerFnError> {",
			"    ${0:}",
			"",
			"    match ${3:}",
			"    {",
			"        Ok(_) => Ok(()),",
			"        Err(e) => Err(ServerFnError::ServerError(e.to_string())),",
			"    }",
			"}"
		]
	},
	"Import Leptos prelude": {
		"scope": "rust",
		"prefix": ["use leptos::prelude::*;"],
		"description": "Import Leptos prelude.",
		"body": ["use leptos::prelude::*;"]
	},
	"Leptos App": {
		"scope": "rust",
		"prefix": ["App"],
		"description": "Create a basic Leptos App component.",
		"body": [
			"#[component]",
			"pub fn App() -> impl IntoView {",
			"    provide_meta_context();",
			"",
			"    view! {",
			"        <Title text=\"Welcome to Leptos\"/>",
			"",
			"        <Router>",
			"            <main>",
			"                <Routes fallback=|| \"Page not found.\".into_view()>",
			"                    <Route path=StaticSegment(\"\") view=HomePage/>",
			"                </Routes>",
			"            </main>",
			"        </Router>",
			"    }",
			"}"
		]
	},
	"Leptos use App": {
		"scope": "rust",
		"prefix": ["use App"],
		"description": "Add imports for a basic Leptos App component.",
		"body": [
			"use leptos::prelude::*;",
			"use leptos_meta::{provide_meta_context, Title};",
			"use leptos_router::{",
			"    components::{Route, Router, Routes},",
			"    StaticSegment,",
			"};"
		]
	},
	"Leptos shell": {
		"scope": "rust",
		"prefix": ["shell()"],
		"description": "Create a Leptos shell.",
		"body": [
			"pub fn shell(options: LeptosOptions) -> impl IntoView {",
			"    use leptos_meta::MetaTags;",
			"",
			"    view! {",
			"        <!DOCTYPE html>",
			"        <html lang=\"en\">",
			"            <head>",
			"                <meta charset=\"utf-8\" />",
			"                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
			"                <AutoReload options=options.clone() />",
			"                <HydrationScripts options />",
			"                <MetaTags />",
			"            </head>",
			"            <body>",
			"                <App />",
			"            </body>",
			"        </html>",
			"    }",
			"}"
		]
	},
	"Leptos Router": {
		"scope": "rust",
		"prefix": ["Router"],
		"description": "Create a basic Leptos router.",
		"body": [
			"<Router>",
			"    <main>",
			"        <Routes fallback=|| \"Page not found.\".into_view()>",
			"            <Route path=StaticSegment(\"\") view=HomePage/>",
			"        </Routes>",
			"    </main>",
			"</Router>"
		]
	},
	"Leptos use Router": {
		"scope": "rust",
		"prefix": ["use Router"],
		"description": "Add imports for a basic Leptos router.",
		"body": [
			"use leptos_router::{",
			"    components::{Route, Router, Routes},",
			"    StaticSegment,",
			"};"
		]
	},
	"Leptos SimpleCounter": {
		"scope": "rust",
		"prefix": ["SimpleCounter"],
		"description": "Create a simple counter Leptos component.",
		"body": [
			"/// A simple counter component.",
			"#[component]",
			"pub fn SimpleCounter() -> impl IntoView {",
			"    let (value, set_value) = signal(0);",
			"",
			"    view! {",
			"        <div>",
			"            <button on:click=move |_| set_value.set(0)>\"Clear\"</button>",
			"            <button on:click=move |_| *set_value.write() -= 1>\"-1\"</button>",
			"            <span>\"Value: \" {value}</span>",
			"            <button on:click=move |_| set_value.update(|value| *value += 1)>\"+1\"</button>",
			"        </div>",
			"    }",
			"}"
		]
	}
}
